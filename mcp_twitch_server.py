#!/usr/bin/env python3
"""
üéÆ MCP TWITCH SERVER - Universal Twitch API MCP Server

–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Twitch API —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é:
üõ†Ô∏è  141 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ Twitch Helix API
üè∑Ô∏è  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ 30+ —Ç–µ–≥–∞–º –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á  
üé¨ –†–ï–ñ–ò–ú –ê–í–¢–û–ö–û–ù–í–ï–ô–ï–†–ê –¥–ª—è –∫–ª–∏–ø–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤ (--automation-mode)
üîÑ HTTP/STDIO/SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –ª—é–±—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
üéØ –ì–æ—Ç–æ–≤ –¥–ª—è opensource –∏ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ò–°–ü–û–õ–¨–ó–£–ï–¢ –ú–ê–ö–°–ò–ú–£–ú FastMCP 2.0 (2025):
- from_openapi –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- RouteMap –¥–ª—è –≥–∏–±–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º
- Tool Transform –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- Custom Tools –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö MCP –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import os
import sys
import argparse
import asyncio
import httpx
from pathlib import Path
import json
from typing import Optional, List, Dict, Any

from fastmcp import FastMCP, Context
from fastmcp.server.openapi import RouteMap, MCPType
from fastmcp.tools import Tool
from fastmcp.tools.tool_transform import ArgTransform

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env file loaded successfully")
except ImportError:
    # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    pass

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–æ–≤—ã–π OpenAPI –ø–∞—Ä—Å–µ—Ä
try:
    from fastmcp.experimental.server.openapi import FastMCPOpenAPI
    USE_EXPERIMENTAL_PARSER = True
    print("üß™ Using experimental FastMCP OpenAPI parser")
except ImportError:
    USE_EXPERIMENTAL_PARSER = False
    print("üìö Using standard FastMCP OpenAPI parser")


class TwitchMCPServer:
    """üéÆ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Twitch API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, client_id: Optional[str] = None, access_token: Optional[str] = None):
        self.client_id = client_id or os.getenv('TWITCH_CLIENT_ID')
        self.access_token = access_token or os.getenv('TWITCH_ACCESS_TOKEN')
        
        if not self.client_id:
            raise ValueError("Twitch Client ID is required. Set TWITCH_CLIENT_ID environment variable or pass client_id parameter.")
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è Twitch API
        headers = {
            'Client-Id': self.client_id,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        
        if self.access_token:
            headers['Authorization'] = f'Bearer {self.access_token}'
        
        self.http_client = httpx.AsyncClient(
            base_url='https://api.twitch.tv/helix',
            headers=headers,
            timeout=30.0
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        self.openapi_spec = self._load_openapi_spec()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π FastMCP —Å–µ—Ä–≤–µ—Ä
        self.mcp = None
        
    def _load_openapi_spec(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        spec_path = Path(__file__).parent / 'openapi.json'
        
        if not spec_path.exists():
            raise FileNotFoundError(f"–†–ï–ê–õ–¨–ù–´–ô OpenAPI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {spec_path}")
        
        print("üöÄ Loading REAL Twitch OpenAPI from DmitryScaletta/twitch-api-swagger...")
        with open(spec_path, 'r', encoding='utf-8') as f:
            spec = json.load(f)
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º OpenAPI
        print("üîß Fixing OpenAPI validation issues...")
        if 'components' in spec and 'schemas' in spec['components']:
            schemas = spec['components']['schemas']
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø Bool -> boolean
            for schema_name, schema in schemas.items():
                self._fix_schema_types(schema)
                    
        print(f"‚úÖ OpenAPI loaded and fixed: {len(spec.get('paths', {}))} paths, {len(spec.get('components', {}).get('schemas', {}))} schemas")
        return spec
    
    def _fix_schema_types(self, obj: Any) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã –≤ OpenAPI —Å—Ö–µ–º–∞—Ö"""
        if isinstance(obj, dict):
            for key, value in obj.items():
                if key == 'type' and value == 'Bool':
                    obj[key] = 'boolean'
                    print(f"  üîß Fixed type: Bool -> boolean")
                elif isinstance(value, (dict, list)):
                    self._fix_schema_types(value)
        elif isinstance(obj, list):
            for item in obj:
                if isinstance(item, (dict, list)):
                    self._fix_schema_types(item)
    
    def _create_route_maps(self, include_tags: Optional[List[str]] = None, 
                          exclude_tags: Optional[List[str]] = None, 
                          automation_mode: bool = False) -> List[RouteMap]:
        """
        üõ†Ô∏è –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á
        - –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        route_maps = []
        
        # –†–ï–ñ–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò: —Ç–æ–ª—å–∫–æ –∫–ª–∏–ø—ã –∏ —Ç—Ä–µ–Ω–¥—ã
        if automation_mode:
            route_maps = [
                # üö´ –ò–°–ö–õ–Æ–ß–ê–ï–ú –í–°–ï –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ  
                RouteMap(pattern=r".*", mcp_type=MCPType.EXCLUDE),
                
                # ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú –¢–û–õ–¨–ö–û AUTOMATION-READY:
                RouteMap(pattern=r"^/clips$", methods=["GET", "POST"], mcp_type=MCPType.TOOL),
                RouteMap(pattern=r"^/videos$", methods=["GET", "DELETE"], mcp_type=MCPType.TOOL),
                RouteMap(pattern=r"^/search/channels$", methods=["GET"], mcp_type=MCPType.RESOURCE),
                RouteMap(pattern=r"^/search/categories$", methods=["GET"], mcp_type=MCPType.RESOURCE),
                RouteMap(pattern=r"^/streams$", methods=["GET"], mcp_type=MCPType.RESOURCE),
                RouteMap(pattern=r"^/users$", methods=["GET"], mcp_type=MCPType.RESOURCE),
                RouteMap(pattern=r"^/games$", methods=["GET"], mcp_type=MCPType.RESOURCE),
                RouteMap(pattern=r"^/games/top$", methods=["GET"], mcp_type=MCPType.RESOURCE),
            ]
            return route_maps
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        if exclude_tags:
            for tag in exclude_tags:
                route_maps.append(
                    RouteMap(
                        tags={tag},
                        mcp_type=MCPType.EXCLUDE,
                    )
                )
        
        # –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        if include_tags:
            # –°–Ω–∞—á–∞–ª–∞ –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ
            route_maps.append(
                RouteMap(
                    pattern=r".*",
                    mcp_type=MCPType.EXCLUDE,
                )
            )
            # –ó–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
            for tag in include_tags:
                route_maps.append(
                    RouteMap(
                        tags={tag},
                        mcp_type=MCPType.TOOL,
                    )
                )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        route_maps.extend([
            # GET —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ–ª–∞–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏
            RouteMap(
                methods=["GET"],
                pattern=r"^/search/.*",
                mcp_type=MCPType.RESOURCE,
            ),
            RouteMap(
                methods=["GET"], 
                pattern=r"^/analytics/.*",
                mcp_type=MCPType.RESOURCE,
            ),
        ])
        
        return route_maps
    
    def _create_tool_transformations(self, automation_mode: bool = False) -> Dict[str, Dict[str, Any]]:
        """
        üõ†Ô∏è –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        """
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò
        transformations = {
            # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "get_users": {
                "name": "find_twitch_users",
                "description": "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ ID. –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
                "meta": {
                    "category": "users",
                    "difficulty": "easy",
                    "examples": ["ninja", "pokimane", "shroud"]
                },
                "arguments": {
                    "login": {
                        "name": "usernames",
                        "description": "–°–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['ninja', 'pokimane'])"
                    },
                    "id": {
                        "name": "user_ids", 
                        "description": "–°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch"
                    }
                }
            },
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–æ–≤
            "get_streams": {
                "name": "get_live_streams",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∂–∏–≤—ã—Ö —Å—Ç—Ä–∏–º–∞—Ö. –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏–≥—Ä–∞–º –∏–ª–∏ —è–∑—ã–∫—É.",
                "meta": {
                    "category": "streams",
                    "difficulty": "easy",
                    "data_freshness": "real-time"
                },
                "arguments": {
                    "user_login": {
                        "name": "streamers",
                        "description": "–°–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    },
                    "game_id": {
                        "name": "game_ids",
                        "description": "ID –∏–≥—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–æ–≤"
                    },
                    "language": {
                        "name": "languages",
                        "description": "–Ø–∑—ã–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['en', 'ru', 'es'])"
                    }
                }
            },
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
            "search_channels": {
                "name": "search_twitch_channels",
                "description": "–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ Twitch –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.",
                "meta": {
                    "category": "search",
                    "difficulty": "easy",
                    "use_cases": ["discovery", "research"]
                },
                "arguments": {
                    "query": {
                        "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)"
                    },
                    "live_only": {
                        "name": "only_live",
                        "description": "–ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ —ç—Ñ–∏—Ä–µ"
                    }
                }
            }
        }
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò –î–õ–Ø –†–ï–ñ–ò–ú–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
        if automation_mode:
            automation_transforms = {
                "get_clips": {
                    "name": "get_trending_clips",
                    "description": "üé¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–ª–∏–ø—ã –¥–ª—è –∞–≤—Ç–æ–∫–æ–Ω–≤–µ–π–µ—Ä–∞",
                    "meta": {
                        "category": "clips_automation",
                        "automation_ready": True,
                        "n8n_friendly": True
                    }
                },
                "get_top_games": {
                    "name": "analyze_trending_categories",
                    "description": "üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–æ–≤—ã—Ö –∏–≥—Ä –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤",
                    "meta": {
                        "category": "trend_analysis", 
                        "automation_ready": True,
                        "data_freshness": "real-time"
                    }
                }
            }
            transformations.update(automation_transforms)
        
        return transformations
    
    async def create_server(self, include_tags: Optional[List[str]] = None, 
                           exclude_tags: Optional[List[str]] = None,
                           automation_mode: bool = False,
                           enable_transformations: bool = True) -> FastMCP:
        """
        üõ†Ô∏è –°–æ–∑–¥–∞–µ—Ç FastMCP —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–≥–∞–º  
        - –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ –∫–ª–∏–ø—ã –∏ —Ç—Ä–µ–Ω–¥—ã –¥–ª—è N8N
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        route_maps = self._create_route_maps(include_tags, exclude_tags, automation_mode)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å–∞–º—ã–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        if USE_EXPERIMENTAL_PARSER:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                os.environ["FASTMCP_EXPERIMENTAL_ENABLE_NEW_OPENAPI_PARSER"] = "true"
            except:
                pass
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if automation_mode:
            server_name = "üé¨ Twitch Clips Automation Server (FastMCP 2.0)"
            server_tags = {"clips", "automation", "trends", "viral", "n8n", "highlights"}
        else:
            server_name = "üéÆ Twitch API MCP Server (FastMCP 2.0)"
            server_tags = {"twitch", "streaming", "api", "helix", "universal"}
        
        self.mcp = FastMCP.from_openapi(
            openapi_spec=self.openapi_spec,
            client=self.http_client,
            name=server_name,
            route_maps=route_maps,
            tags=server_tags
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if enable_transformations:
            transformations = self._create_tool_transformations(automation_mode)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            for tool_name, transform_config in transformations.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å await)
                    tools = await self.mcp.get_tools()
                    if tool_name in tools:
                        original_tool = tools[tool_name]
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ê–ö–¢–£–ê–õ–¨–ù–´–ô API
                        transform_args = {}
                        if "arguments" in transform_config:
                            for arg_name, arg_config in transform_config["arguments"].items():
                                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã ArgTransform –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º API
                                arg_transform_kwargs = {}
                                if "name" in arg_config:
                                    arg_transform_kwargs["name"] = arg_config["name"]
                                if "description" in arg_config:
                                    arg_transform_kwargs["description"] = arg_config["description"]
                                if "hide" in arg_config:
                                    arg_transform_kwargs["hide"] = arg_config["hide"]
                                if "default" in arg_config:
                                    arg_transform_kwargs["default"] = arg_config["default"]
                                if "default_factory" in arg_config:
                                    arg_transform_kwargs["default_factory"] = arg_config["default_factory"]
                                
                                transform_args[arg_name] = ArgTransform(**arg_transform_kwargs)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô API Tool.from_tool
                        transformed_tool = Tool.from_tool(
                            original_tool,
                            name=transform_config.get("name", tool_name),
                            description=transform_config.get("description"),
                            meta=transform_config.get("meta", {}),
                            transform_args=transform_args if transform_args else None
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        self.mcp.add_tool(transformed_tool)
                        
                        # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        original_tool.disable()
                        
                        print(f"‚úÖ Transformed tool: {tool_name} -> {transform_config.get('name', tool_name)}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not transform tool {tool_name}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        await self._add_custom_tools(automation_mode)
        
        return self.mcp
    
    async def _add_custom_tools(self, automation_mode: bool = False):
        """üõ†Ô∏è –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        @self.mcp.tool(
            name="get_twitch_token_info",
            description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ –¥–æ—Å—Ç—É–ø–∞ Twitch API",
            tags={"auth", "utility"},
            meta={"category": "authentication", "difficulty": "easy"}
        )
        async def get_token_info(ctx: Context) -> Dict[str, Any]:
            """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ"""
            if not self.access_token:
                return {"error": "No access token provided"}
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Twitch API
                response = await self.http_client.get("/oauth2/validate")
                if response.status_code == 200:
                    data = response.json()
                    await ctx.info(f"Token validated successfully for client: {data.get('client_id', 'unknown')}")
                    return {
                        "valid": True,
                        "client_id": data.get("client_id"),
                        "scopes": data.get("scopes", []),
                        "expires_in": data.get("expires_in")
                    }
                else:
                    await ctx.error(f"Token validation failed: {response.status_code}")
                    return {"valid": False, "error": "Token validation failed"}
            except Exception as e:
                await ctx.error(f"Error validating token: {str(e)}")
                return {"valid": False, "error": str(e)}
        
        # –†–ï–ñ–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        if not automation_mode:
            return
            
        @self.mcp.tool(
            name="analyze_viral_potential",
            description="üî• –ê–Ω–∞–ª–∏–∑ –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∫–ª–∏–ø–∞ –∏–ª–∏ —Å—Ç—Ä–∏–º–∞. –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –∞–≤—Ç–æ–∫–æ–Ω–≤–µ–π–µ—Ä–∞!",
            tags={"automation", "viral", "trends", "clips"},
            meta={"category": "trend_analysis", "automation_ready": True, "n8n_friendly": True}
        )
        async def analyze_viral_potential(streamer_username: str, game_category: Optional[str] = None, ctx: Context = None) -> Dict[str, Any]:
            """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏—Ä—É—Å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∏–º–µ—Ä–∞"""
            try:
                await ctx.info(f"üî• Analyzing viral potential for: {streamer_username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–µ—Ä–µ
                user_response = await self.http_client.get(f"/users?login={streamer_username}")
                if user_response.status_code != 200:
                    return {"error": f"Streamer {streamer_username} not found", "viral_score": 0}
                
                user_data = user_response.json()["data"][0]
                user_id = user_data["id"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º
                stream_response = await self.http_client.get(f"/streams?user_id={user_id}")
                stream_data = stream_response.json()["data"]
                is_live = len(stream_data) > 0
                
                # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
                follower_count = 0
                try:
                    followers_response = await self.http_client.get(f"/channels/followers?broadcaster_id={user_id}")
                    if followers_response.status_code == 200:
                        follower_count = followers_response.json().get("total", 0)
                except:
                    pass
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π —Å–∫–æ—Ä
                viral_score = 0
                factors = []
                
                # –§–∞–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                if follower_count > 100000:
                    viral_score += 40
                    factors.append("üåü High follower count")
                elif follower_count > 10000:
                    viral_score += 25
                    factors.append("üìà Good follower count")
                
                # –§–∞–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤ —ç—Ñ–∏—Ä–µ)
                if is_live:
                    stream_info = stream_data[0]
                    viewer_count = stream_info.get("viewer_count", 0)
                    
                    if viewer_count > 10000:
                        viral_score += 30
                        factors.append("üî¥ High viewer count LIVE")
                    elif viewer_count > 1000:
                        viral_score += 20
                        factors.append("üì∫ Good viewer count")
                    
                    viral_score += 10  # –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    factors.append("‚ö° Currently streaming")
                
                # –§–∞–∫—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
                view_count = user_data.get("view_count", 0)
                if view_count > 50000000:
                    viral_score += 20
                    factors.append("üöÄ Established creator")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                if viral_score >= 70:
                    recommendation = "üî• EXTREMELY HIGH - Create clips IMMEDIATELY!"
                elif viral_score >= 50:
                    recommendation = "‚≠ê HIGH - Great for viral content"
                elif viral_score >= 30:
                    recommendation = "üìà MEDIUM - Good potential"
                else:
                    recommendation = "üí§ LOW - Consider other streamers"
                
                result = {
                    "streamer": user_data["display_name"],
                    "viral_score": viral_score,
                    "recommendation": recommendation,
                    "factors": factors,
                    "is_live": is_live,
                    "follower_count": follower_count,
                    "automation_priority": "high" if viral_score >= 50 else "medium" if viral_score >= 30 else "low"
                }
                
                if is_live:
                    result.update({
                        "current_viewers": stream_data[0].get("viewer_count", 0),
                        "current_game": stream_data[0].get("game_name", "Unknown"),
                        "stream_title": stream_data[0].get("title", "")
                    })
                
                await ctx.info(f"üî• Viral analysis complete: {viral_score}/100 - {recommendation}")
                return result
                
            except Exception as e:
                await ctx.error(f"Error analyzing viral potential: {str(e)}")
                return {"error": str(e), "viral_score": 0}
        
        @self.mcp.tool(
            name="get_automation_ready_clips",
            description="üé¨ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–ø—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è N8N",
            tags={"automation", "clips", "n8n", "highlights"},
            meta={"category": "clips_automation", "automation_ready": True, "n8n_friendly": True}
        )
        async def get_automation_ready_clips(
            streamer_username: Optional[str] = None,
            game_name: Optional[str] = None, 
            hours_back: int = 24,
            min_view_count: int = 1000,
            ctx: Context = None
        ) -> Dict[str, Any]:
            """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–ø—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
            try:
                await ctx.info(f"üé¨ Getting automation-ready clips (last {hours_back}h)")
                
                params = {
                    "first": 20  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                }
                
                if streamer_username:
                    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—Ä–∏–º–µ—Ä–∞
                    user_response = await self.http_client.get(f"/users?login={streamer_username}")
                    if user_response.status_code == 200:
                        user_data = user_response.json()["data"]
                        if user_data:
                            params["broadcaster_id"] = user_data[0]["id"]
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–ø—ã
                clips_response = await self.http_client.get("/clips", params=params)
                if clips_response.status_code != 200:
                    return {"error": "Failed to get clips", "clips": []}
                
                clips_data = clips_response.json()["data"]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–ø—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                automation_clips = []
                for clip in clips_data:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
                    if clip.get("view_count", 0) < min_view_count:
                        continue
                    
                    automation_clip = {
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        "clip_id": clip["id"],
                        "title": clip["title"],
                        "url": clip["url"],
                        "embed_url": clip["embed_url"],
                        "thumbnail_url": clip["thumbnail_url"],
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                        "view_count": clip["view_count"],
                        "duration": clip["duration"],
                        "created_at": clip["created_at"],
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∏–º–µ—Ä–µ
                        "broadcaster_name": clip["broadcaster_name"],
                        "broadcaster_id": clip["broadcaster_id"],
                        
                        # –ò–≥—Ä–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                        "game_name": clip.get("game_name", "Unknown"),
                        "game_id": clip.get("game_id"),
                        
                        # N8N –≥–æ—Ç–æ–≤—ã–µ –ø–æ–ª—è
                        "automation_score": min(100, int(clip["view_count"] / 100)),
                        "download_ready": True,
                        "processing_priority": "high" if clip["view_count"] > 5000 else "medium",
                        
                        # –¢–µ–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
                        "auto_tags": [
                            clip.get("game_name", "gaming").lower().replace(" ", "_"),
                            "viral" if clip["view_count"] > 10000 else "trending",
                            f"duration_{int(clip['duration'])}s"
                        ]
                    }
                    
                    automation_clips.append(automation_clip)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ automation_score
                automation_clips.sort(key=lambda x: x["automation_score"], reverse=True)
                
                result = {
                    "clips": automation_clips[:10],  # –¢–æ–ø 10 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                    "total_found": len(clips_data),
                    "automation_ready": len(automation_clips),
                    "filters_applied": {
                        "streamer": streamer_username,
                        "game": game_name,
                        "min_views": min_view_count,
                        "hours_back": hours_back
                    },
                    "n8n_workflow_ready": True
                }
                
                await ctx.info(f"üé¨ Found {len(automation_clips)} automation-ready clips")
                return result
                
            except Exception as e:
                await ctx.error(f"Error getting automation clips: {str(e)}")
                return {"error": str(e), "clips": []}
        
        @self.mcp.tool(
            name="trend_monitoring_dashboard",
            description="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–≤—Ç–æ–∫–æ–Ω–≤–µ–π–µ—Ä–∞",
            tags={"trends", "monitoring", "automation", "dashboard"},
            meta={"category": "trend_analysis", "automation_ready": True, "real_time": True}
        )
        async def trend_monitoring_dashboard(ctx: Context = None) -> Dict[str, Any]:
            """–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
            try:
                await ctx.info("üìä Building trend monitoring dashboard...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∏–≥—Ä—ã
                top_games_response = await self.http_client.get("/games/top?first=10")
                top_games = []
                if top_games_response.status_code == 200:
                    games_data = top_games_response.json()["data"]
                    for i, game in enumerate(games_data, 1):
                        top_games.append({
                            "rank": i,
                            "name": game["name"],
                            "id": game["id"],
                            "box_art_url": game["box_art_url"],
                            "automation_priority": "high" if i <= 3 else "medium" if i <= 7 else "low"
                        })
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Å—Ç—Ä–∏–º—ã
                top_streams_response = await self.http_client.get("/streams?first=15")
                trending_streamers = []
                if top_streams_response.status_code == 200:
                    streams_data = top_streams_response.json()["data"]
                    for stream in streams_data[:10]:
                        viral_score = min(100, int(stream["viewer_count"] / 500))
                        trending_streamers.append({
                            "username": stream["user_name"],
                            "user_id": stream["user_id"],
                            "viewer_count": stream["viewer_count"],
                            "game_name": stream["game_name"],
                            "title": stream["title"],
                            "thumbnail_url": stream["thumbnail_url"],
                            "viral_score": viral_score,
                            "clip_potential": "high" if viral_score >= 60 else "medium" if viral_score >= 30 else "low"
                        })
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                automation_recommendations = []
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–≥—Ä–∞–º
                if top_games:
                    for game in top_games[:3]:
                        automation_recommendations.append({
                            "type": "game_focus",
                            "action": f"Monitor clips from {game['name']}",
                            "priority": "high",
                            "game_id": game["id"]
                        })
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∏–º–µ—Ä–∞–º
                for streamer in trending_streamers[:3]:
                    if streamer["viral_score"] >= 60:
                        automation_recommendations.append({
                            "type": "streamer_clips",
                            "action": f"Create clips from {streamer['username']} stream",
                            "priority": "urgent",
                            "user_id": streamer["user_id"],
                            "current_viewers": streamer["viewer_count"]
                        })
                
                dashboard = {
                    "timestamp": asyncio.get_event_loop().time(),
                    "trending_games": top_games,
                    "viral_streamers": trending_streamers,
                    "automation_recommendations": automation_recommendations,
                    "market_analysis": {
                        "hot_categories": [game["name"] for game in top_games[:3]],
                        "peak_viewing_hours": True,  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —É–º–Ω—ã–º
                        "clip_creation_opportunity": "high" if len([s for s in trending_streamers if s["viral_score"] >= 50]) >= 3 else "medium"
                    },
                    "n8n_webhook_ready": True
                }
                
                await ctx.info(f"üìä Dashboard ready: {len(top_games)} games, {len(trending_streamers)} viral streamers")
                return dashboard
                
            except Exception as e:
                await ctx.error(f"Error building trend dashboard: {str(e)}")
                return {"error": str(e)}


def create_cli_parser() -> argparse.ArgumentParser:
    """üéÆ –°–æ–∑–¥–∞–µ—Ç CLI –ø–∞—Ä—Å–µ—Ä –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Twitch MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    parser = argparse.ArgumentParser(
        description="üéÆ Universal Twitch API MCP Server (FastMCP 2.0)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üõ†Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Twitch API —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é:

Examples:
  # –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (141 tools)
  python mcp_twitch_server.py
  
  # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
  python mcp_twitch_server.py --include-tags channels users streams
  python mcp_twitch_server.py --exclude-tags moderation
  
  # HTTP —Å–µ—Ä–≤–µ—Ä
  python mcp_twitch_server.py --transport http --port 8080
  
  # –†–ï–ñ–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  python mcp_twitch_server.py --automation-mode
  python mcp_twitch_server.py --automation-mode --transport http --port 8080

üè∑Ô∏è –î–û–°–¢–£–ü–ù–´–ï –¢–ï–ì–ò:
  channels, users, streams, games, clips, search, analytics, 
  moderation, content, followers, following, extensions, etc.
  
üé¨ –†–ï–ñ–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò (--automation-mode):
  ‚Ä¢ –¢–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∏–ø–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è N8N –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏  
  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        """
    )
    
    parser.add_argument(
        '--client-id',
        help='Twitch Client ID (or set TWITCH_CLIENT_ID env var)'
    )
    
    parser.add_argument(
        '--access-token', 
        help='Twitch Access Token (or set TWITCH_ACCESS_TOKEN env var)'
    )
    
    parser.add_argument(
        '--include-tags',
        nargs='+',
        help='Include only tools with these tags'
    )
    
    parser.add_argument(
        '--exclude-tags',
        nargs='+', 
        help='Exclude tools with these tags'
    )
    
    parser.add_argument(
        '--automation-mode',
        action='store_true',
        default=os.getenv('AUTOMATION_MODE', '').lower() == 'true',
        help='üé¨ Enable automation mode - specialized for clips and trends'
    )
    
    parser.add_argument(
        '--no-transformations',
        action='store_true',
        help='Disable tool transformations (use original OpenAPI tools)'
    )
    
    parser.add_argument(
        '--transport',
        choices=['stdio', 'http', 'sse'],
        default='stdio',
        help='Transport protocol (default: stdio)'
    )
    
    parser.add_argument(
        '--host',
        default=os.getenv('HOST', '127.0.0.1'),
        help='Host for HTTP/SSE transport (default: from $HOST env or 127.0.0.1)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=int(os.getenv('PORT', 8080)),
        help='Port for HTTP/SSE transport (default: from $PORT env or 8080)'
    )
    
    parser.add_argument(
        '--list-tags',
        action='store_true',
        help='List all available tags and exit'
    )
    
    return parser


async def main():
    """üéÆ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    parser = create_cli_parser()
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    if args.list_tags:
        print("üè∑Ô∏è Available tags:")
        tags = [
            "channels - Channel management and information",
            "users - User information and profiles", 
            "streams - Live stream data",
            "games - Game and category information",
            "clips - Video clips management",
            "search - Search functionality",
            "analytics - Analytics and statistics",
            "moderation - Moderation tools",
            "content - Content management",
            "followers - Follower relationships",
            "following - Following relationships",
            "extensions - Twitch extensions",
            "",
            "üé¨ AUTOMATION MODE (--automation-mode):",
            "  ‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ clips, videos, streams, users, games, search",
            "  ‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤",
            "  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è N8N –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        ]
        for tag in tags:
            if tag:
                print(f"  {tag}")
            else:
                print()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        server = TwitchMCPServer(
            client_id=args.client_id,
            access_token=args.access_token
        )
        
        # –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä —Å –Ω—É–∂–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        mcp = await server.create_server(
            include_tags=args.include_tags,
            exclude_tags=args.exclude_tags,
            automation_mode=args.automation_mode,
            enable_transformations=not args.no_transformations
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        tools = await mcp.get_tools()
        
        if args.automation_mode:
            print(f"\nüé¨ Twitch Automation Server started with {len(tools)} specialized tools")
            print(f"üéØ Mode: Clips & Highlights & Trends automation")
        else:
            print(f"\nüéÆ Twitch MCP Server started with {len(tools)} tools")
            print(f"üéØ Mode: Universal Twitch API access")
        
        if args.include_tags:
            print(f"üìå Included tags: {', '.join(args.include_tags)}")
        if args.exclude_tags:
            print(f"üö´ Excluded tags: {', '.join(args.exclude_tags)}")
        
        print(f"üîß Tool transformations: {'enabled' if not args.no_transformations else 'disabled'}")
        print(f"üåê Transport: {args.transport}")
        
        if args.transport in ['http', 'sse']:
            url_desc = "N8N Integration URL" if args.automation_mode else "HTTP API URL"
            print(f"üîó {url_desc}: http://{args.host}:{args.port}")
        
        if args.automation_mode:
            print(f"\nüé¨ AUTOMATION TOOLS:")
            automation_count = 0
            for tool_name in sorted(tools.keys()):
                tool = tools[tool_name]
                tags = getattr(tool, 'tags', set())
                if any(tag in {'automation', 'clips', 'viral', 'trends'} for tag in tags):
                    tags_str = f"[{', '.join(tags)}]" if tags else ""
                    print(f"  üéØ {tool_name} {tags_str}")
                    automation_count += 1
            
            supporting_count = len(tools) - automation_count
            if supporting_count > 0:
                print(f"\nüìã SUPPORTING TOOLS: {supporting_count} standard Twitch API tools")
        else:
            print(f"\nAvailable tools ({len(tools)}):")
            for tool_name in sorted(tools.keys()):
                tool = tools[tool_name]
                tags = getattr(tool, 'tags', set())
                tags_str = f"[{', '.join(tags)}]" if tags else ""
                print(f"  ‚Ä¢ {tool_name} {tags_str}")
        
        integration_ready = "N8N ready" if args.automation_mode else "MCP ready"
        print(f"\nüöÄ {integration_ready} on {args.transport} transport!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint –¥–ª—è Railway
        if args.transport in ['http', 'sse']:
            @mcp.server.get("/health")
            async def health_check():
                """Health check endpoint for Railway and monitoring"""
                return {"status": "healthy", "service": "twitch-mcp-server", "mode": "automation" if args.automation_mode else "universal"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å async –º–µ—Ç–æ–¥–∞–º–∏
        if args.transport == 'stdio':
            await mcp.run_async()
        elif args.transport == 'http':
            await mcp.run_async(transport='http', host=args.host, port=args.port)
        elif args.transport == 'sse':
            await mcp.run_async(transport='sse', host=args.host, port=args.port)
            
    except KeyboardInterrupt:
        print("\nüëã Server stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–µ—Ä–∞
    if len(sys.argv) > 1 and sys.argv[1] in ['--help', '-h', '--list-tags']:
        asyncio.run(main())
    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å FastMCP CLI (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) 
    elif len(sys.argv) == 1:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
        try:
            print("üéÆ Starting Universal Twitch MCP Server...")
            server = TwitchMCPServer()
            mcp = asyncio.run(server.create_server())
        except Exception as e:
            print(f"‚ùå Server error: {e}")
            sys.exit(1)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–æ–ª–Ω—ã–º CLI
        asyncio.run(main())
