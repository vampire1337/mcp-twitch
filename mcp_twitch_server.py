#!/usr/bin/env python3
"""
MCP Twitch Server - –û–ë–ù–û–í–õ–ï–ù–û —Å —Å–∞–º—ã–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ FastMCP!
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ú–ê–ö–°–ò–ú–£–ú –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π FastMCP –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ 2025:
- from_openapi –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- RouteMap –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º  
- Tool Transform –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –ê–ö–¢–£–ê–õ–¨–ù–´–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ pyproject.toml
- CLI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
- –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–æ–≤—ã–π OpenAPI –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
"""

import os
import sys
import argparse
import asyncio
import httpx
from pathlib import Path
import json
from typing import Optional, List, Dict, Any

from fastmcp import FastMCP, Context
from fastmcp.server.openapi import RouteMap, MCPType
from fastmcp.tools import Tool
from fastmcp.tools.tool_transform import ArgTransform

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –Ω–æ–≤—ã–π OpenAPI –ø–∞—Ä—Å–µ—Ä
try:
    from fastmcp.experimental.server.openapi import FastMCPOpenAPI
    USE_EXPERIMENTAL_PARSER = True
    print("üß™ Using experimental FastMCP OpenAPI parser")
except ImportError:
    USE_EXPERIMENTAL_PARSER = False
    print("üìö Using standard FastMCP OpenAPI parser")


class TwitchMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Twitch API —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    def __init__(self, client_id: Optional[str] = None, access_token: Optional[str] = None):
        self.client_id = client_id or os.getenv('TWITCH_CLIENT_ID')
        self.access_token = access_token or os.getenv('TWITCH_ACCESS_TOKEN')
        
        if not self.client_id:
            raise ValueError("Twitch Client ID is required. Set TWITCH_CLIENT_ID environment variable or pass client_id parameter.")
        
        # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è Twitch API
        headers = {
            'Client-Id': self.client_id,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        
        if self.access_token:
            headers['Authorization'] = f'Bearer {self.access_token}'
        
        self.http_client = httpx.AsyncClient(
            base_url='https://api.twitch.tv/helix',
            headers=headers,
            timeout=30.0
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        self.openapi_spec = self._load_openapi_spec()
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π FastMCP —Å–µ—Ä–≤–µ—Ä
        self.mcp = None
        
    def _load_openapi_spec(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        spec_path = Path(__file__).parent / 'openapi.json'
        
        if not spec_path.exists():
            raise FileNotFoundError(f"–†–ï–ê–õ–¨–ù–´–ô OpenAPI —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {spec_path}")
        
        print("üöÄ Loading REAL Twitch OpenAPI from DmitryScaletta/twitch-api-swagger...")
        with open(spec_path, 'r', encoding='utf-8') as f:
            spec = json.load(f)
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º OpenAPI
        print("üîß Fixing OpenAPI validation issues...")
        if 'components' in spec and 'schemas' in spec['components']:
            schemas = spec['components']['schemas']
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø Bool -> boolean
            for schema_name, schema in schemas.items():
                self._fix_schema_types(schema)
                    
        print(f"‚úÖ OpenAPI loaded and fixed: {len(spec.get('paths', {}))} paths, {len(spec.get('components', {}).get('schemas', {}))} schemas")
        return spec
    
    def _fix_schema_types(self, obj: Any) -> None:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã –≤ OpenAPI —Å—Ö–µ–º–∞—Ö"""
        if isinstance(obj, dict):
            for key, value in obj.items():
                if key == 'type' and value == 'Bool':
                    obj[key] = 'boolean'
                    print(f"  üîß Fixed type: Bool -> boolean")
                elif isinstance(value, (dict, list)):
                    self._fix_schema_types(value)
        elif isinstance(obj, list):
            for item in obj:
                if isinstance(item, (dict, list)):
                    self._fix_schema_types(item)
    
    def _create_route_maps(self, include_tags: Optional[List[str]] = None, 
                          exclude_tags: Optional[List[str]] = None) -> List[RouteMap]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ FastMCP –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        """
        route_maps = []
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º –∏—Ö
        if exclude_tags:
            for tag in exclude_tags:
                route_maps.append(
                    RouteMap(
                        tags={tag},
                        mcp_type=MCPType.EXCLUDE,
                    )
                )
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è - –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
        if include_tags:
            # –°–Ω–∞—á–∞–ª–∞ –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ
            route_maps.append(
                RouteMap(
                    pattern=r".*",
                    mcp_type=MCPType.EXCLUDE,
                )
            )
            # –ó–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
            for tag in include_tags:
                route_maps.append(
                    RouteMap(
                        tags={tag},
                        mcp_type=MCPType.TOOL,
                    )
                )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        
        # GET —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–µ–ª–∞–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏
        route_maps.extend([
            RouteMap(
                methods=["GET"],
                pattern=r"^/search/.*",
                mcp_type=MCPType.RESOURCE,
            ),
            RouteMap(
                methods=["GET"], 
                pattern=r"^/analytics/.*",
                mcp_type=MCPType.RESOURCE,
            ),
        ])
        
        # POST/PATCH/DELETE –æ—Å—Ç–∞—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return route_maps
    
    def _create_tool_transformations(self) -> Dict[str, Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Tool Transform –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ FastMCP.
        """
        transformations = {
            # –£–ª—É—á—à–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
            "get_channel_info": {
                "name": "get_twitch_channel",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Twitch –∫–∞–Ω–∞–ª–µ –ø–æ ID —Å—Ç—Ä–∏–º–µ—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, —è–∑—ã–∫ –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                "meta": {
                    "category": "channels",
                    "difficulty": "easy",
                    "rate_limit": "low"
                },
                "arguments": {
                    "broadcaster_id": {
                        "name": "streamer_id", 
                        "description": "ID —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–∞ Twitch (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ get_users)"
                    }
                }
            },
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            "get_users": {
                "name": "find_twitch_users",
                "description": "–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch –ø–æ –∏—Ö –ª–æ–≥–∏–Ω—É –∏–ª–∏ ID. –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
                "meta": {
                    "category": "users",
                    "difficulty": "easy",
                    "examples": ["ninja", "pokimane", "shroud"]
                },
                "arguments": {
                    "login": {
                        "name": "usernames",
                        "description": "–°–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['ninja', 'pokimane'])"
                    },
                    "id": {
                        "name": "user_ids", 
                        "description": "–°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Twitch"
                    }
                }
            },
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–æ–≤
            "get_streams": {
                "name": "get_live_streams",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –∂–∏–≤—ã—Ö —Å—Ç—Ä–∏–º–∞—Ö. –ú–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏–≥—Ä–∞–º –∏–ª–∏ —è–∑—ã–∫—É.",
                "meta": {
                    "category": "streams",
                    "difficulty": "easy",
                    "data_freshness": "real-time"
                },
                "arguments": {
                    "user_login": {
                        "name": "streamers",
                        "description": "–°–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    },
                    "game_id": {
                        "name": "game_ids",
                        "description": "ID –∏–≥—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–æ–≤"
                    },
                    "language": {
                        "name": "languages",
                        "description": "–Ø–∑—ã–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['en', 'ru', 'es'])"
                    }
                }
            },
            
            # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
            "search_channels": {
                "name": "search_twitch_channels",
                "description": "–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ Twitch –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é. –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤.",
                "meta": {
                    "category": "search",
                    "difficulty": "easy",
                    "use_cases": ["discovery", "research"]
                },
                "arguments": {
                    "query": {
                        "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)"
                    },
                    "live_only": {
                        "name": "only_live",
                        "description": "–ò—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ —ç—Ñ–∏—Ä–µ"
                    }
                }
            },
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å —Å–∫—Ä—ã—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            "ban_user": {
                "name": "moderate_ban_user",
                "description": "–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –∫–∞–Ω–∞–ª–∞. –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
                "meta": {
                    "category": "moderation",
                    "difficulty": "advanced",
                    "requires_auth": "moderator",
                    "destructive": True
                },
                "arguments": {
                    "broadcaster_id": {
                        "name": "channel_id",
                        "description": "ID –∫–∞–Ω–∞–ª–∞ –≥–¥–µ –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    },
                    "moderator_id": {
                        "hide": True,
                        "default_factory": lambda: "auto"  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
                    }
                }
            }
        }
        
        return transformations
    
    async def create_server(self, include_tags: Optional[List[str]] = None, 
                           exclude_tags: Optional[List[str]] = None,
                           enable_transformations: bool = True) -> FastMCP:
        """
        –°–æ–∑–¥–∞–µ—Ç FastMCP —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ FastMCP –∏–∑ –∫–æ—Ä–æ–±–∫–∏.
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        route_maps = self._create_route_maps(include_tags, exclude_tags)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å —Å–∞–º—ã–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        if USE_EXPERIMENTAL_PARSER:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                os.environ["FASTMCP_EXPERIMENTAL_ENABLE_NEW_OPENAPI_PARSER"] = "true"
            except:
                pass
        
        self.mcp = FastMCP.from_openapi(
            openapi_spec=self.openapi_spec,
            client=self.http_client,
            name="üéÆ Twitch API MCP Server (Powered by FastMCP)",
            route_maps=route_maps,
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
            tags={"twitch", "streaming", "api", "helix"}
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
        if enable_transformations:
            transformations = self._create_tool_transformations()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            for tool_name, transform_config in transformations.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å await)
                    tools = await self.mcp.get_tools()
                    if tool_name in tools:
                        original_tool = tools[tool_name]
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ê–ö–¢–£–ê–õ–¨–ù–´–ô API
                        transform_args = {}
                        if "arguments" in transform_config:
                            for arg_name, arg_config in transform_config["arguments"].items():
                                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã ArgTransform –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º API
                                arg_transform_kwargs = {}
                                if "name" in arg_config:
                                    arg_transform_kwargs["name"] = arg_config["name"]
                                if "description" in arg_config:
                                    arg_transform_kwargs["description"] = arg_config["description"]
                                if "hide" in arg_config:
                                    arg_transform_kwargs["hide"] = arg_config["hide"]
                                if "default" in arg_config:
                                    arg_transform_kwargs["default"] = arg_config["default"]
                                if "default_factory" in arg_config:
                                    arg_transform_kwargs["default_factory"] = arg_config["default_factory"]
                                
                                transform_args[arg_name] = ArgTransform(**arg_transform_kwargs)
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô API Tool.from_tool
                        transformed_tool = Tool.from_tool(
                            original_tool,
                            name=transform_config.get("name", tool_name),
                            description=transform_config.get("description"),
                            meta=transform_config.get("meta", {}),
                            transform_args=transform_args if transform_args else None
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        self.mcp.add_tool(transformed_tool)
                        
                        # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        original_tool.disable()
                        
                        print(f"‚úÖ Transformed tool: {tool_name} -> {transform_config.get('name', tool_name)}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not transform tool {tool_name}: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        await self._add_custom_tools()
        
        return self.mcp
    
    async def _add_custom_tools(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"""
        
        @self.mcp.tool(
            name="get_twitch_token_info",
            description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ –¥–æ—Å—Ç—É–ø–∞ Twitch API",
            tags={"auth", "utility"},
            meta={"category": "authentication", "difficulty": "easy"}
        )
        async def get_token_info(ctx: Context) -> Dict[str, Any]:
            """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ"""
            if not self.access_token:
                return {"error": "No access token provided"}
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Twitch API
                response = await self.http_client.get("/oauth2/validate")
                if response.status_code == 200:
                    data = response.json()
                    await ctx.info(f"Token validated successfully for client: {data.get('client_id', 'unknown')}")
                    return {
                        "valid": True,
                        "client_id": data.get("client_id"),
                        "scopes": data.get("scopes", []),
                        "expires_in": data.get("expires_in")
                    }
                else:
                    await ctx.error(f"Token validation failed: {response.status_code}")
                    return {"valid": False, "error": "Token validation failed"}
            except Exception as e:
                await ctx.error(f"Error validating token: {str(e)}")
                return {"valid": False, "error": str(e)}
        
        @self.mcp.tool(
            name="twitch_quick_stats",
            description="–ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Twitch (–ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞)",
            tags={"users", "stats", "utility"},
            meta={"category": "analytics", "difficulty": "easy"}
        )
        async def quick_user_stats(username: str, ctx: Context) -> Dict[str, Any]:
            """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            try:
                await ctx.info(f"Getting stats for user: {username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = await self.http_client.get(f"/users?login={username}")
                if user_response.status_code != 200:
                    return {"error": f"User {username} not found"}
                
                user_data = user_response.json()["data"][0]
                user_id = user_data["id"]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–µ
                stream_response = await self.http_client.get(f"/streams?user_id={user_id}")
                stream_data = stream_response.json()["data"]
                is_live = len(stream_data) > 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                followers_response = await self.http_client.get(f"/channels/followers?broadcaster_id={user_id}")
                followers_count = 0
                if followers_response.status_code == 200:
                    followers_count = followers_response.json().get("total", 0)
                
                stats = {
                    "username": user_data["display_name"],
                    "user_id": user_id,
                    "is_live": is_live,
                    "followers_count": followers_count,
                    "total_views": user_data["view_count"],
                    "created_at": user_data["created_at"],
                    "description": user_data["description"]
                }
                
                if is_live:
                    stream_info = stream_data[0]
                    stats.update({
                        "current_game": stream_info["game_name"],
                        "stream_title": stream_info["title"],
                        "viewer_count": stream_info["viewer_count"],
                        "stream_started": stream_info["started_at"]
                    })
                
                await ctx.info(f"Stats retrieved for {username}: Live={is_live}, Followers={followers_count}")
                return stats
                
            except Exception as e:
                await ctx.error(f"Error getting stats for {username}: {str(e)}")
                return {"error": str(e)}


def create_cli_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç CLI –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º"""
    parser = argparse.ArgumentParser(
        description="Twitch API MCP Server with advanced filtering",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
  python mcp_twitch_server.py
  
  # –¢–æ–ª—å–∫–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  python mcp_twitch_server.py --include-tags channels users
  
  # –ò—Å–∫–ª—é—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
  python mcp_twitch_server.py --exclude-tags moderation
  
  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  python mcp_twitch_server.py --include-tags search
  
  # HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
  python mcp_twitch_server.py --transport http --port 8080

Available tags: channels, users, streams, games, clips, search, analytics, moderation, content, followers, following, extensions
        """
    )
    
    parser.add_argument(
        '--client-id',
        help='Twitch Client ID (or set TWITCH_CLIENT_ID env var)'
    )
    
    parser.add_argument(
        '--access-token', 
        help='Twitch Access Token (or set TWITCH_ACCESS_TOKEN env var)'
    )
    
    parser.add_argument(
        '--include-tags',
        nargs='+',
        help='Include only tools with these tags'
    )
    
    parser.add_argument(
        '--exclude-tags',
        nargs='+', 
        help='Exclude tools with these tags'
    )
    
    parser.add_argument(
        '--no-transformations',
        action='store_true',
        help='Disable tool transformations (use original OpenAPI tools)'
    )
    
    parser.add_argument(
        '--transport',
        choices=['stdio', 'http', 'sse'],
        default='stdio',
        help='Transport protocol (default: stdio)'
    )
    
    parser.add_argument(
        '--host',
        default='127.0.0.1',
        help='Host for HTTP/SSE transport (default: 127.0.0.1)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=8000,
        help='Port for HTTP/SSE transport (default: 8000)'
    )
    
    parser.add_argument(
        '--list-tags',
        action='store_true',
        help='List all available tags and exit'
    )
    
    return parser


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    parser = create_cli_parser()
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤
    if args.list_tags:
        print("Available tags:")
        tags = [
            "channels - Channel management and information",
            "users - User information and profiles", 
            "streams - Live stream data",
            "games - Game and category information",
            "clips - Video clips management",
            "search - Search functionality",
            "analytics - Analytics and statistics",
            "moderation - Moderation tools",
            "content - Content management",
            "followers - Follower relationships",
            "following - Following relationships",
            "extensions - Twitch extensions"
        ]
        for tag in tags:
            print(f"  {tag}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = TwitchMCPServer(
            client_id=args.client_id,
            access_token=args.access_token
        )
        
        # –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        mcp = await server.create_server(
            include_tags=args.include_tags,
            exclude_tags=args.exclude_tags,
            enable_transformations=not args.no_transformations
        )
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        tools = await mcp.get_tools()
        print(f"\nüöÄ Twitch MCP Server started with {len(tools)} tools")
        
        if args.include_tags:
            print(f"üìå Included tags: {', '.join(args.include_tags)}")
        if args.exclude_tags:
            print(f"üö´ Excluded tags: {', '.join(args.exclude_tags)}")
        
        print(f"üîß Tool transformations: {'enabled' if not args.no_transformations else 'disabled'}")
        print(f"üåê Transport: {args.transport}")
        
        if args.transport in ['http', 'sse']:
            print(f"üîó URL: http://{args.host}:{args.port}")
        
        print("\nAvailable tools:")
        for tool_name in sorted(tools.keys()):
            tool = tools[tool_name]
            tags = getattr(tool, 'tags', set())
            tags_str = f"[{', '.join(tags)}]" if tags else ""
            print(f"  ‚Ä¢ {tool_name} {tags_str}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å async –º–µ—Ç–æ–¥–∞–º–∏
        if args.transport == 'stdio':
            await mcp.run_async()
        elif args.transport == 'http':
            await mcp.run_async(transport='http', host=args.host, port=args.port)
        elif args.transport == 'sse':
            await mcp.run_async(transport='sse', host=args.host, port=args.port)
            
    except KeyboardInterrupt:
        print("\nüëã Server stopped by user")
    except Exception as e:
        print(f"‚ùå Error starting server: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–µ—Ä–∞
    if len(sys.argv) > 1 and sys.argv[1] in ['--help', '-h', '--list-tags']:
        asyncio.run(main())
    # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å FastMCP CLI (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    elif len(sys.argv) == 1:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è FastMCP CLI
        try:
            server = TwitchMCPServer()
            mcp = asyncio.run(server.create_server())
        except Exception as e:
            print(f"Error: {e}")
            sys.exit(1)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–æ–ª–Ω—ã–º CLI
        asyncio.run(main())
